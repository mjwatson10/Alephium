import { ApiRequestArguments, ApiRequestHandler } from './types';
import { Api as ExplorerApi } from './api-explorer';
export declare class ExplorerProvider {
    readonly blocks: ExplorerApi<string>['blocks'];
    readonly transactions: ExplorerApi<string>['transactions'];
    readonly addresses: ExplorerApi<string>['addresses'];
    readonly infos: ExplorerApi<string>['infos'];
    readonly mempool: ExplorerApi<string>['mempool'];
    readonly tokens: ExplorerApi<string>['tokens'];
    readonly charts: ExplorerApi<string>['charts'];
    readonly contractEvents: ExplorerApi<string>['contractEvents'];
    readonly contracts: ExplorerApi<string>['contracts'];
    readonly market: ExplorerApi<string>['market'];
    readonly utils: ExplorerApi<string>['utils'];
    constructor(baseUrl: string, apiKey?: string, customFetch?: typeof fetch);
    constructor(provider: ExplorerProvider);
    constructor(handler: ApiRequestHandler);
    request: (args: ApiRequestArguments) => Promise<any>;
    static Proxy(explorerProvider: ExplorerProvider): ExplorerProvider;
    static Remote(handler: ApiRequestHandler): ExplorerProvider;
}
