import * as node from './api-alephium';
export type Number256 = bigint | string;
export type Val = Number256 | boolean | string | Val[] | ValObject | Map<Val, Val>;
export interface ValObject extends Record<string, Val> {
}
export type NamedVals = Record<string, Val>;
export declare const PrimitiveTypes: string[];
export interface Token {
    id: string;
    amount: Number256;
}
export declare function toApiToken(token: Token): node.Token;
export declare function toApiTokens(tokens?: Token[]): node.Token[] | undefined;
export declare function fromApiToken(token: node.Token): Token;
export declare function fromApiTokens(tokens?: node.Token[]): Token[] | undefined;
export declare function toApiBoolean(v: Val): boolean;
export declare function toApiNumber256(v: Val): string;
export declare function toApiNumber256Optional(v?: Val): string | undefined;
export declare function fromApiNumber256(n: string): bigint;
export declare function toApiByteVec(v: Val): string;
export declare function toApiAddress(v: Val): string;
export declare function toApiArray(tpe: string, v: Val): node.Val;
export declare function toApiVal(v: Val, tpe: string): node.Val;
export declare function fromApiPrimitiveVal(value: node.Val, tpe: string, systemEvent?: boolean): Val;
export declare function decodeArrayType(tpe: string): [string, number];
export declare function getDefaultPrimitiveValue(tpe: string): Val;
export interface ApiRequestArguments {
    path: string;
    method: string;
    params: any[];
}
export type ApiRequestHandler = (args: ApiRequestArguments) => Promise<any>;
export declare function forwardRequests(api: Record<string, any>, handler: ApiRequestHandler): void;
export declare function requestWithLog(api: Record<string, any>): void;
export declare function request(provider: Record<string, any>, args: ApiRequestArguments): Promise<any>;
export declare enum StdInterfaceIds {
    FungibleToken = "0001",
    NFTCollection = "0002",
    NFT = "0003",
    NFTCollectionWithRoyalty = "000201"
}
export interface FungibleTokenMetaData {
    symbol: string;
    name: string;
    decimals: number;
    totalSupply: Number256;
}
export interface NFTMetaData {
    tokenUri: string;
    collectionId: string;
    nftIndex: Number256;
}
export interface NFTCollectionMetaData {
    collectionUri: string;
    totalSupply: Number256;
}
export interface NFTTokenUriMetaData {
    name: string;
    description?: string;
    image: string;
    attributes?: {
        trait_type: string;
        value: string | number | boolean;
    }[];
}
export interface NFTCollectionUriMetaData {
    name: string;
    description: string;
    image: string;
}
