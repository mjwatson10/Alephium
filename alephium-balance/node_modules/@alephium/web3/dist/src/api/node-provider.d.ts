import { ApiRequestArguments, ApiRequestHandler, FungibleTokenMetaData, NFTMetaData, NFTCollectionMetaData } from './types';
import { Api as NodeApi } from './api-alephium';
import { HexString } from '../utils';
import * as node from '../api/api-alephium';
interface NodeProviderApis {
    wallets: NodeApi<string>['wallets'];
    infos: NodeApi<string>['infos'];
    blockflow: NodeApi<string>['blockflow'];
    addresses: NodeApi<string>['addresses'];
    transactions: NodeApi<string>['transactions'];
    mempool: NodeApi<string>['mempool'];
    contracts: NodeApi<string>['contracts'];
    multisig: NodeApi<string>['multisig'];
    utils: NodeApi<string>['utils'];
    miners: NodeApi<string>['miners'];
    events: NodeApi<string>['events'];
}
export declare class NodeProvider implements NodeProviderApis {
    readonly wallets: NodeApi<string>['wallets'];
    readonly infos: NodeApi<string>['infos'];
    readonly blockflow: NodeApi<string>['blockflow'];
    readonly addresses: NodeApi<string>['addresses'];
    readonly transactions: NodeApi<string>['transactions'];
    readonly mempool: NodeApi<string>['mempool'];
    readonly contracts: NodeApi<string>['contracts'];
    readonly multisig: NodeApi<string>['multisig'];
    readonly utils: NodeApi<string>['utils'];
    readonly miners: NodeApi<string>['miners'];
    readonly events: NodeApi<string>['events'];
    constructor(baseUrl: string, apiKey?: string, customFetch?: typeof fetch);
    constructor(provider: NodeProvider);
    constructor(handler: ApiRequestHandler);
    request: (args: ApiRequestArguments) => Promise<any>;
    static Proxy(nodeProvider: NodeProvider): NodeProvider;
    static Remote(handler: ApiRequestHandler): NodeProvider;
    fetchFungibleTokenMetaData: (tokenId: HexString) => Promise<FungibleTokenMetaData>;
    fetchNFTMetaData: (tokenId: HexString) => Promise<NFTMetaData>;
    fetchNFTCollectionMetaData: (collectionId: HexString) => Promise<NFTCollectionMetaData>;
    fetchNFTRoyaltyAmount: (collectionId: HexString, tokenId: HexString, salePrice: bigint) => Promise<bigint>;
    guessStdInterfaceId: (tokenId: HexString) => Promise<HexString | undefined>;
    guessFollowsNFTCollectionStd: (contractId: HexString) => Promise<boolean>;
    guessFollowsNFTCollectionWithRoyaltyStd: (contractId: HexString) => Promise<boolean>;
    guessStdTokenType: (tokenId: HexString) => Promise<'fungible' | 'non-fungible' | undefined>;
}
export declare function tryGetCallResult(result: node.CallContractResult): node.CallContractSucceeded;
export {};
