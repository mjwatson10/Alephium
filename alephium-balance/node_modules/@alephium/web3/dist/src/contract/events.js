"use strict";
/*
Copyright 2018 - 2022 The Alephium Authors
This file is part of the alephium project.

The library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the library. If not, see <http://www.gnu.org/licenses/>.
*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribeToEvents = exports.EventSubscription = void 0;
const web3 = __importStar(require("../global"));
const utils_1 = require("../utils");
class EventSubscription extends utils_1.Subscription {
    constructor(options, contractAddress, fromCount) {
        super(options);
        this.contractAddress = contractAddress;
        this.fromCount = typeof fromCount === 'undefined' ? 0 : fromCount;
        this.onEventCountChanged = options.onEventCountChanged;
    }
    currentEventCount() {
        return this.fromCount;
    }
    async getEvents(start) {
        try {
            return await web3
                .getCurrentNodeProvider()
                .events.getEventsContractContractaddress(this.contractAddress, { start });
        }
        catch (error) {
            if (error instanceof Error && error.message.includes(`Contract events of ${this.contractAddress} not found`)) {
                return { events: [], nextStart: start };
            }
            throw error;
        }
    }
    async polling() {
        try {
            const events = await this.getEvents(this.fromCount);
            if (this.fromCount === events.nextStart) {
                return;
            }
            const promises = events.events.map((event) => this.messageCallback(event));
            await Promise.all(promises);
            this.fromCount = events.nextStart;
            if (this.onEventCountChanged !== undefined) {
                await this.onEventCountChanged(this.fromCount);
            }
            await this.polling();
        }
        catch (err) {
            await this.errorCallback(err, this);
        }
    }
}
exports.EventSubscription = EventSubscription;
function subscribeToEvents(options, contractAddress, fromCount) {
    const subscription = new EventSubscription(options, contractAddress, fromCount);
    subscription.subscribe();
    return subscription;
}
exports.subscribeToEvents = subscribeToEvents;
