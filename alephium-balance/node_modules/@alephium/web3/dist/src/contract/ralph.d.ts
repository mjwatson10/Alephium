import { Val } from '../api';
import { HexString } from '../utils';
import { Fields, FieldsSig, Struct } from './contract';
export declare function encodeByteVec(hex: string): Uint8Array;
export declare function encodeAddress(address: string): Uint8Array;
export declare enum VmValType {
    Bool = 0,
    I256 = 1,
    U256 = 2,
    ByteVec = 3,
    Address = 4
}
export declare function encodeVmBool(bool: boolean): Uint8Array;
export declare function encodeVmI256(i256: bigint): Uint8Array;
export declare function encodeVmU256(u256: bigint): Uint8Array;
export declare function encodeVmByteVec(bytes: string): Uint8Array;
export declare function encodeVmAddress(address: string): Uint8Array;
export declare function boolVal(value: boolean): {
    type: 'Bool';
    value: Val;
};
export declare function i256Val(value: bigint | number): {
    type: 'I256';
    value: Val;
};
export declare function u256Val(value: bigint | number): {
    type: 'U256';
    value: Val;
};
export declare function byteVecVal(value: HexString): {
    type: 'ByteVec';
    value: Val;
};
export declare function addressVal(value: string): {
    type: 'Address';
    value: Val;
};
export declare function encodePrimitiveValues(values: {
    type: string;
    value: Val;
}[]): Uint8Array;
export declare function encodeScriptFieldAsString(tpe: string, value: Val): string;
export declare function encodeScriptField(tpe: string, value: Val): Uint8Array;
export declare function splitFields(fieldsSig: FieldsSig): [FieldsSig, FieldsSig];
export declare function parseMapType(type: string): [string, string];
export declare function encodeMapPrefix(mapIndex: number): Uint8Array;
export declare function calcFieldSize(type: string, isMutable: boolean, structs: Struct[]): {
    immFields: number;
    mutFields: number;
};
export declare function tryDecodeMapDebugLog(message: string): {
    path: string;
    mapIndex: number;
    encodedKey: Uint8Array;
    isInsert: boolean;
} | undefined;
export declare function decodePrimitive(value: Uint8Array, type: string): Val;
export declare function encodeMapKey(value: Val, type: string): Uint8Array;
export declare function typeLength(typ: string, structs: Struct[]): number;
export declare function flattenFields(fields: Fields, names: string[], types: string[], isMutable: boolean[], structs: Struct[]): {
    name: string;
    type: string;
    value: Val;
    isMutable: boolean;
}[];
export declare function buildScriptByteCode(bytecodeTemplate: string, fields: Fields, fieldsSig: FieldsSig, structs: Struct[]): string;
export declare function encodeContractFields(fields: Fields, fieldsSig: FieldsSig, structs: Struct[]): {
    encodedImmFields: Uint8Array;
    encodedMutFields: Uint8Array;
};
export declare function buildContractByteCode(bytecode: string, fields: Fields, fieldsSig: FieldsSig, structs: Struct[]): string;
export declare function encodeContractField(tpe: string, value: Val): Uint8Array;
export declare function buildDebugBytecode(bytecode: string, bytecodePatch: string): string;
