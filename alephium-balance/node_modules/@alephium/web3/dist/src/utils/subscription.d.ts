import EventEmitter from 'eventemitter3';
type MessageCallback<Message> = (message: Message) => Promise<void> | void;
type ErrorCallback<Message> = (error: any, subscription: Subscription<Message>) => Promise<void> | void;
export interface SubscribeOptions<Message> {
    pollingInterval: number;
    messageCallback: MessageCallback<Message>;
    errorCallback: ErrorCallback<Message>;
}
export declare abstract class Subscription<Message> {
    pollingInterval: number;
    protected messageCallback: MessageCallback<Message>;
    protected errorCallback: ErrorCallback<Message>;
    protected task: ReturnType<typeof setTimeout> | undefined;
    protected eventEmitter: EventEmitter;
    protected cancelled: boolean;
    constructor(options: SubscribeOptions<Message>);
    subscribe(): void;
    unsubscribe(): void;
    isCancelled(): boolean;
    protected abstract polling(): Promise<void>;
}
export {};
