"use strict";
/*
Copyright 2018 - 2022 The Alephium Authors
This file is part of the alephium project.

The library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the library. If not, see <http://www.gnu.org/licenses/>.
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
class Subscription {
    constructor(options) {
        this.pollingInterval = options.pollingInterval;
        this.messageCallback = options.messageCallback;
        this.errorCallback = options.errorCallback;
        this.task = undefined;
        this.cancelled = false;
        this.eventEmitter = new eventemitter3_1.default();
    }
    subscribe() {
        this.eventEmitter.on('tick', async () => {
            await this.polling();
            if (!this.cancelled) {
                this.task = setTimeout(() => this.eventEmitter.emit('tick'), this.pollingInterval);
            }
        });
        this.eventEmitter.emit('tick');
    }
    unsubscribe() {
        this.eventEmitter.removeAllListeners();
        this.cancelled = true;
        if (typeof this.task !== 'undefined') {
            clearTimeout(this.task);
        }
    }
    isCancelled() {
        return this.cancelled;
    }
}
exports.Subscription = Subscription;
