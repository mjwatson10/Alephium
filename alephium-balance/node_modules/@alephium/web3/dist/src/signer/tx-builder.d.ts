import { NodeProvider } from '../api';
import { SignChainedTxParams, SignChainedTxResult, SignDeployContractTxParams, SignDeployContractTxResult, SignExecuteScriptTxParams, SignExecuteScriptTxResult, SignTransferTxParams, SignTransferTxResult, SignUnsignedTxParams, SignUnsignedTxResult } from './types';
export declare abstract class TransactionBuilder {
    abstract get nodeProvider(): NodeProvider;
    static from(nodeProvider: NodeProvider): TransactionBuilder;
    static from(baseUrl: string, apiKey?: string, customFetch?: typeof fetch): TransactionBuilder;
    private static validatePublicKey;
    buildTransferTx(params: SignTransferTxParams, publicKey: string): Promise<Omit<SignTransferTxResult, 'signature'>>;
    buildDeployContractTx(params: SignDeployContractTxParams, publicKey: string): Promise<Omit<SignDeployContractTxResult, 'signature'>>;
    buildExecuteScriptTx(params: SignExecuteScriptTxParams, publicKey: string): Promise<Omit<SignExecuteScriptTxResult, 'signature'>>;
    buildChainedTx(params: SignChainedTxParams[], publicKeys: string[]): Promise<Omit<SignChainedTxResult, 'signature'>[]>;
    static buildUnsignedTx(params: SignUnsignedTxParams): Omit<SignUnsignedTxResult, 'signature'>;
    private buildTransferTxParams;
    private buildDeployContractTxParams;
    private buildExecuteScriptTxParams;
    private convertTransferTxResult;
    private convertDeployContractTxResult;
    private convertExecuteScriptTxResult;
}
