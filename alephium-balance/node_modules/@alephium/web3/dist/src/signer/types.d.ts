import { Number256, Token } from '../api';
import { node } from '../api';
import { NetworkId } from '../utils';
export type Address = string;
export type OutputRef = node.OutputRef;
export interface Destination {
    address: string;
    attoAlphAmount: Number256;
    tokens?: Token[];
    lockTime?: number;
    message?: string;
}
export type KeyType = 'default' | 'bip340-schnorr';
export interface Account {
    keyType: KeyType;
    address: string;
    group: number;
    publicKey: string;
}
export type SignerAddress = {
    signerAddress: string;
    signerKeyType?: KeyType;
};
export interface SignTransferTxParams {
    signerAddress: string;
    signerKeyType?: KeyType;
    destinations: Destination[];
    utxos?: OutputRef[];
    gasAmount?: number;
    gasPrice?: Number256;
}
export interface SignTransferTxResult {
    fromGroup: number;
    toGroup: number;
    unsignedTx: string;
    txId: string;
    signature: string;
    gasAmount: number;
    gasPrice: Number256;
}
export interface SignDeployContractTxParams {
    signerAddress: string;
    signerKeyType?: KeyType;
    bytecode: string;
    initialAttoAlphAmount?: Number256;
    initialTokenAmounts?: Token[];
    issueTokenAmount?: Number256;
    issueTokenTo?: string;
    gasAmount?: number;
    gasPrice?: Number256;
}
export interface SignDeployContractTxResult {
    groupIndex: number;
    unsignedTx: string;
    txId: string;
    signature: string;
    contractId: string;
    contractAddress: string;
    gasAmount: number;
    gasPrice: Number256;
}
export interface SignExecuteScriptTxParams {
    signerAddress: string;
    signerKeyType?: KeyType;
    bytecode: string;
    attoAlphAmount?: Number256;
    tokens?: Token[];
    gasAmount?: number;
    gasPrice?: Number256;
    gasEstimationMultiplier?: number;
}
export interface SignExecuteScriptTxResult {
    groupIndex: number;
    unsignedTx: string;
    txId: string;
    signature: string;
    gasAmount: number;
    gasPrice: Number256;
    simulatedOutputs: node.Output[];
}
export interface SignUnsignedTxParams {
    signerAddress: string;
    signerKeyType?: KeyType;
    unsignedTx: string;
}
export interface SignUnsignedTxResult {
    fromGroup: number;
    toGroup: number;
    unsignedTx: string;
    txId: string;
    signature: string;
    gasAmount: number;
    gasPrice: Number256;
}
export type SignTransferChainedTxParams = SignTransferTxParams & {
    type: 'Transfer';
};
export type SignDeployContractChainedTxParams = SignDeployContractTxParams & {
    type: 'DeployContract';
};
export type SignExecuteScriptChainedTxParams = SignExecuteScriptTxParams & {
    type: 'ExecuteScript';
};
export type SignChainedTxParams = SignTransferChainedTxParams | SignDeployContractChainedTxParams | SignExecuteScriptChainedTxParams;
export type SignTransferChainedTxResult = SignTransferTxResult & {
    type: 'Transfer';
};
export type SignDeployContractChainedTxResult = SignDeployContractTxResult & {
    type: 'DeployContract';
};
export type SignExecuteScriptChainedTxResult = SignExecuteScriptTxResult & {
    type: 'ExecuteScript';
};
export type SignChainedTxResult = SignTransferChainedTxResult | SignDeployContractChainedTxResult | SignExecuteScriptChainedTxResult;
export type MessageHasher = 'alephium' | 'sha256' | 'blake2b' | 'identity';
export interface SignMessageParams {
    signerAddress: string;
    signerKeyType?: KeyType;
    message: string;
    messageHasher: MessageHasher;
}
export interface SignMessageResult {
    signature: string;
}
export interface SubmitTransactionParams {
    unsignedTx: string;
    signature: string;
}
export interface SubmissionResult {
    txId: string;
    fromGroup: number;
    toGroup: number;
}
export interface EnableOptionsBase {
    addressGroup?: number;
    keyType?: KeyType;
    networkId?: NetworkId;
    onDisconnected: () => Promise<void> | void;
}
