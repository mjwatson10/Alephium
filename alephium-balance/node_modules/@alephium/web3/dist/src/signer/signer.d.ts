import { ExplorerProvider, NodeProvider } from '../api';
import { node } from '../api';
import { Account, EnableOptionsBase, Destination, SignDeployContractTxParams, SignDeployContractTxResult, SignExecuteScriptTxParams, SignExecuteScriptTxResult, SignMessageParams, SignMessageResult, SignTransferTxParams, SignTransferTxResult, SignUnsignedTxParams, SignUnsignedTxResult, SubmissionResult, SubmitTransactionParams, KeyType, MessageHasher, SignChainedTxParams, SignChainedTxResult } from './types';
export declare abstract class SignerProvider {
    abstract get nodeProvider(): NodeProvider | undefined;
    abstract get explorerProvider(): ExplorerProvider | undefined;
    protected abstract unsafeGetSelectedAccount(): Promise<Account>;
    getSelectedAccount(): Promise<Account>;
    static validateAccount(account: Account): void;
    abstract signAndSubmitTransferTx(params: SignTransferTxParams): Promise<SignTransferTxResult>;
    abstract signAndSubmitDeployContractTx(params: SignDeployContractTxParams): Promise<SignDeployContractTxResult>;
    abstract signAndSubmitExecuteScriptTx(params: SignExecuteScriptTxParams): Promise<SignExecuteScriptTxResult>;
    abstract signAndSubmitUnsignedTx(params: SignUnsignedTxParams): Promise<SignUnsignedTxResult>;
    abstract signAndSubmitChainedTx(params: SignChainedTxParams[]): Promise<SignChainedTxResult[]>;
    abstract signUnsignedTx(params: SignUnsignedTxParams): Promise<SignUnsignedTxResult>;
    abstract signMessage(params: SignMessageParams): Promise<SignMessageResult>;
}
export declare abstract class InteractiveSignerProvider<EnableOptions extends EnableOptionsBase = EnableOptionsBase> extends SignerProvider {
    protected abstract unsafeEnable(opt?: EnableOptions): Promise<Account>;
    enable(opt?: EnableOptions): Promise<Account>;
    abstract disconnect(): Promise<void>;
}
export declare abstract class SignerProviderSimple extends SignerProvider {
    abstract get nodeProvider(): NodeProvider;
    submitTransaction(params: SubmitTransactionParams): Promise<SubmissionResult>;
    signAndSubmitTransferTx(params: SignTransferTxParams): Promise<SignTransferTxResult>;
    signAndSubmitDeployContractTx(params: SignDeployContractTxParams): Promise<SignDeployContractTxResult>;
    signAndSubmitExecuteScriptTx(params: SignExecuteScriptTxParams): Promise<SignExecuteScriptTxResult>;
    signAndSubmitUnsignedTx(params: SignUnsignedTxParams): Promise<SignUnsignedTxResult>;
    signAndSubmitChainedTx(params: SignChainedTxParams[]): Promise<SignChainedTxResult[]>;
    protected abstract getPublicKey(address: string): Promise<string>;
    signTransferTx(params: SignTransferTxParams): Promise<SignTransferTxResult>;
    buildTransferTx(params: SignTransferTxParams): Promise<Omit<SignTransferTxResult, 'signature'>>;
    signDeployContractTx(params: SignDeployContractTxParams): Promise<SignDeployContractTxResult>;
    buildDeployContractTx(params: SignDeployContractTxParams): Promise<Omit<SignDeployContractTxResult, 'signature'>>;
    signExecuteScriptTx(params: SignExecuteScriptTxParams): Promise<SignExecuteScriptTxResult>;
    buildExecuteScriptTx(params: SignExecuteScriptTxParams): Promise<Omit<SignExecuteScriptTxResult, 'signature'>>;
    signChainedTx(params: SignChainedTxParams[]): Promise<SignChainedTxResult[]>;
    buildChainedTx(params: SignChainedTxParams[]): Promise<Omit<SignChainedTxResult, 'signature'>[]>;
    signUnsignedTx(params: SignUnsignedTxParams): Promise<SignUnsignedTxResult>;
    signMessage(params: SignMessageParams): Promise<SignMessageResult>;
    abstract signRaw(signerAddress: string, hexString: string): Promise<string>;
}
export declare abstract class SignerProviderWithMultipleAccounts extends SignerProviderSimple {
    abstract setSelectedAccount(address: string): Promise<void>;
    abstract getAccounts(): Promise<Account[]>;
    getAccount(signerAddress: string): Promise<Account>;
    getPublicKey(signerAddress: string): Promise<string>;
}
export declare abstract class SignerProviderWithCachedAccounts<T extends Account> extends SignerProviderWithMultipleAccounts {
    private _selectedAccount;
    protected readonly _accounts: Map<string, T>;
    protected unsafeGetSelectedAccount(): Promise<T>;
    setSelectedAccount(address: string): Promise<void>;
    getAccounts(): Promise<T[]>;
    getAccount(address: string): Promise<T>;
}
export declare function extendMessage(message: string): string;
export declare function hashMessage(message: string, hasher: MessageHasher): string;
export declare function verifySignedMessage(message: string, messageHasher: MessageHasher, publicKey: string, signature: string, keyType?: KeyType): boolean;
export declare function toApiDestination(data: Destination): node.Destination;
export declare function toApiDestinations(data: Destination[]): node.Destination[];
export declare function fromApiDestination(data: node.Destination): Destination;
