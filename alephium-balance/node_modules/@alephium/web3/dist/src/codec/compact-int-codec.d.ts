import { Codec } from './codec';
import { Reader } from './reader';
type FixedWidthMode = {
    type: 'SingleByte' | 'TwoByte' | 'FourByte';
    prefix: number;
    negPrefix: number;
};
type MultiByteMode = {
    type: 'MultiByte';
    prefix: number;
};
type Mode = FixedWidthMode | MultiByteMode;
export declare class UnSigned {
    static readonly oneByteBound: bigint;
    static readonly twoByteBound: bigint;
    static readonly fourByteBound: bigint;
    static readonly u256UpperBound: bigint;
    static readonly u32UpperBound: number;
    static encodeU32(value: number): Uint8Array;
    static encodeU256(value: bigint): Uint8Array;
    static decodeInt(mode: FixedWidthMode, body: Uint8Array): number;
    static decodeU32(mode: Mode, body: Uint8Array): number;
    static decodeU256(mode: Mode, body: Uint8Array): bigint;
}
export declare const u256Codec: {
    encode(input: bigint): Uint8Array;
    _decode(input: Reader): bigint;
    decode(input: Uint8Array): bigint;
    bimap<R>(from: (v: bigint) => R, to: (v: R) => bigint): Codec<R>;
};
export declare const u32Codec: {
    encode(input: number): Uint8Array;
    _decode(input: Reader): number;
    decode(input: Uint8Array): number;
    bimap<R>(from: (v: number) => R, to: (v: R) => number): Codec<R>;
};
export declare class Signed {
    static readonly signFlag = 32;
    static readonly oneByteBound: bigint;
    static readonly twoByteBound: bigint;
    static readonly fourByteBound: bigint;
    static readonly i256UpperBound: bigint;
    static readonly i256LowerBound: bigint;
    static readonly i32UpperBound: number;
    static readonly i32LowerBound: number;
    static encodeI32(value: number): Uint8Array;
    static encodePositiveI32(value: number): Uint8Array;
    static encodeNegativeI32(value: number): Uint8Array;
    static encodeI256(value: bigint): Uint8Array;
    static decodeInt(mode: FixedWidthMode, body: Uint8Array): number;
    static decodePositiveInt(mode: FixedWidthMode, body: Uint8Array): number;
    static decodeNegativeInt(mode: FixedWidthMode, body: Uint8Array): number;
    static decodeI32(mode: Mode, body: Uint8Array): number;
    static decodeI256(mode: Mode, body: Uint8Array): bigint;
}
export declare const i256Codec: {
    encode(input: bigint): Uint8Array;
    _decode(input: Reader): bigint;
    decode(input: Uint8Array): bigint;
    bimap<R>(from: (v: bigint) => R, to: (v: R) => bigint): Codec<R>;
};
export declare const i32Codec: {
    encode(input: number): Uint8Array;
    _decode(input: Reader): number;
    decode(input: Uint8Array): number;
    bimap<R>(from: (v: number) => R, to: (v: R) => number): Codec<R>;
};
export {};
