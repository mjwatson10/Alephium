"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodedSameAsPrevious = exports.unlockScriptCodec = void 0;
/*
Copyright 2018 - 2022 The Alephium Authors
This file is part of the alephium project.

The library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

The library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with the library. If not, see <http://www.gnu.org/licenses/>.
*/
const array_codec_1 = require("./array-codec");
const compact_int_codec_1 = require("./compact-int-codec");
const codec_1 = require("./codec");
const script_codec_1 = require("./script-codec");
const val_1 = require("./val");
const p2pkhCodec = new codec_1.FixedSizeCodec(33);
const keyWithIndexCodec = new codec_1.ObjectCodec({
    publicKey: p2pkhCodec,
    index: compact_int_codec_1.i32Codec
});
const p2mpkhCodec = new array_codec_1.ArrayCodec(keyWithIndexCodec);
const p2shCodec = new codec_1.ObjectCodec({
    script: script_codec_1.scriptCodec,
    params: val_1.valsCodec
});
const sameAsPreviousCodec = new (class extends codec_1.Codec {
    encode() {
        return new Uint8Array([]);
    }
    _decode() {
        return 'SameAsPrevious';
    }
})();
exports.unlockScriptCodec = new codec_1.EnumCodec('unlock script', {
    P2PKH: p2pkhCodec,
    P2MPKH: p2mpkhCodec,
    P2SH: p2shCodec,
    SameAsPrevious: sameAsPreviousCodec
});
exports.encodedSameAsPrevious = exports.unlockScriptCodec.encode({ kind: 'SameAsPrevious', value: 'SameAsPrevious' });
