import { ArrayCodec } from './array-codec';
import { ByteString } from './bytestring-codec';
import { LockupScript } from './lockup-script-codec';
import { Codec } from './codec';
import { Reader } from './reader';
export type Instr = {
    name: 'CallLocal';
    code: 0x00;
    index: number;
} | {
    name: 'CallExternal';
    code: 0x01;
    index: number;
} | {
    name: 'Return';
    code: 0x02;
} | {
    name: 'ConstTrue';
    code: 0x03;
} | {
    name: 'ConstFalse';
    code: 0x04;
} | {
    name: 'I256Const0';
    code: 0x05;
} | {
    name: 'I256Const1';
    code: 0x06;
} | {
    name: 'I256Const2';
    code: 0x07;
} | {
    name: 'I256Const3';
    code: 0x08;
} | {
    name: 'I256Const4';
    code: 0x09;
} | {
    name: 'I256Const5';
    code: 0x0a;
} | {
    name: 'I256ConstN1';
    code: 0x0b;
} | {
    name: 'U256Const0';
    code: 0x0c;
} | {
    name: 'U256Const1';
    code: 0x0d;
} | {
    name: 'U256Const2';
    code: 0x0e;
} | {
    name: 'U256Const3';
    code: 0x0f;
} | {
    name: 'U256Const4';
    code: 0x10;
} | {
    name: 'U256Const5';
    code: 0x11;
} | {
    name: 'I256Const';
    code: 0x12;
    value: bigint;
} | {
    name: 'U256Const';
    code: 0x13;
    value: bigint;
} | {
    name: 'BytesConst';
    code: 0x14;
    value: ByteString;
} | {
    name: 'AddressConst';
    code: 0x15;
    value: LockupScript;
} | {
    name: 'LoadLocal';
    code: 0x16;
    index: number;
} | {
    name: 'StoreLocal';
    code: 0x17;
    index: number;
} | {
    name: 'Pop';
    code: 0x18;
} | {
    name: 'BoolNot';
    code: 0x19;
} | {
    name: 'BoolAnd';
    code: 0x1a;
} | {
    name: 'BoolOr';
    code: 0x1b;
} | {
    name: 'BoolEq';
    code: 0x1c;
} | {
    name: 'BoolNeq';
    code: 0x1d;
} | {
    name: 'BoolToByteVec';
    code: 0x1e;
} | {
    name: 'I256Add';
    code: 0x1f;
} | {
    name: 'I256Sub';
    code: 0x20;
} | {
    name: 'I256Mul';
    code: 0x21;
} | {
    name: 'I256Div';
    code: 0x22;
} | {
    name: 'I256Mod';
    code: 0x23;
} | {
    name: 'I256Eq';
    code: 0x24;
} | {
    name: 'I256Neq';
    code: 0x25;
} | {
    name: 'I256Lt';
    code: 0x26;
} | {
    name: 'I256Le';
    code: 0x27;
} | {
    name: 'I256Gt';
    code: 0x28;
} | {
    name: 'I256Ge';
    code: 0x29;
} | {
    name: 'U256Add';
    code: 0x2a;
} | {
    name: 'U256Sub';
    code: 0x2b;
} | {
    name: 'U256Mul';
    code: 0x2c;
} | {
    name: 'U256Div';
    code: 0x2d;
} | {
    name: 'U256Mod';
    code: 0x2e;
} | {
    name: 'U256Eq';
    code: 0x2f;
} | {
    name: 'U256Neq';
    code: 0x30;
} | {
    name: 'U256Lt';
    code: 0x31;
} | {
    name: 'U256Le';
    code: 0x32;
} | {
    name: 'U256Gt';
    code: 0x33;
} | {
    name: 'U256Ge';
    code: 0x34;
} | {
    name: 'U256ModAdd';
    code: 0x35;
} | {
    name: 'U256ModSub';
    code: 0x36;
} | {
    name: 'U256ModMul';
    code: 0x37;
} | {
    name: 'U256BitAnd';
    code: 0x38;
} | {
    name: 'U256BitOr';
    code: 0x39;
} | {
    name: 'U256Xor';
    code: 0x3a;
} | {
    name: 'U256SHL';
    code: 0x3b;
} | {
    name: 'U256SHR';
    code: 0x3c;
} | {
    name: 'I256ToU256';
    code: 0x3d;
} | {
    name: 'I256ToByteVec';
    code: 0x3e;
} | {
    name: 'U256ToI256';
    code: 0x3f;
} | {
    name: 'U256ToByteVec';
    code: 0x40;
} | {
    name: 'ByteVecEq';
    code: 0x41;
} | {
    name: 'ByteVecNeq';
    code: 0x42;
} | {
    name: 'ByteVecSize';
    code: 0x43;
} | {
    name: 'ByteVecConcat';
    code: 0x44;
} | {
    name: 'AddressEq';
    code: 0x45;
} | {
    name: 'AddressNeq';
    code: 0x46;
} | {
    name: 'AddressToByteVec';
    code: 0x47;
} | {
    name: 'IsAssetAddress';
    code: 0x48;
} | {
    name: 'IsContractAddress';
    code: 0x49;
} | {
    name: 'Jump';
    code: 0x4a;
    offset: number;
} | {
    name: 'IfTrue';
    code: 0x4b;
    offset: number;
} | {
    name: 'IfFalse';
    code: 0x4c;
    offset: number;
} | {
    name: 'Assert';
    code: 0x4d;
} | {
    name: 'Blake2b';
    code: 0x4e;
} | {
    name: 'Keccak256';
    code: 0x4f;
} | {
    name: 'Sha256';
    code: 0x50;
} | {
    name: 'Sha3';
    code: 0x51;
} | {
    name: 'VerifyTxSignature';
    code: 0x52;
} | {
    name: 'VerifySecP256K1';
    code: 0x53;
} | {
    name: 'VerifyED25519';
    code: 0x54;
} | {
    name: 'NetworkId';
    code: 0x55;
} | {
    name: 'BlockTimeStamp';
    code: 0x56;
} | {
    name: 'BlockTarget';
    code: 0x57;
} | {
    name: 'TxId';
    code: 0x58;
} | {
    name: 'TxInputAddressAt';
    code: 0x59;
} | {
    name: 'TxInputsSize';
    code: 0x5a;
} | {
    name: 'VerifyAbsoluteLocktime';
    code: 0x5b;
} | {
    name: 'VerifyRelativeLocktime';
    code: 0x5c;
} | {
    name: 'Log1';
    code: 0x5d;
} | {
    name: 'Log2';
    code: 0x5e;
} | {
    name: 'Log3';
    code: 0x5f;
} | {
    name: 'Log4';
    code: 0x60;
} | {
    name: 'Log5';
    code: 0x61;
} | {
    name: 'ByteVecSlice';
    code: 0x62;
} | {
    name: 'ByteVecToAddress';
    code: 0x63;
} | {
    name: 'Encode';
    code: 0x64;
} | {
    name: 'Zeros';
    code: 0x65;
} | {
    name: 'U256To1Byte';
    code: 0x66;
} | {
    name: 'U256To2Byte';
    code: 0x67;
} | {
    name: 'U256To4Byte';
    code: 0x68;
} | {
    name: 'U256To8Byte';
    code: 0x69;
} | {
    name: 'U256To16Byte';
    code: 0x6a;
} | {
    name: 'U256To32Byte';
    code: 0x6b;
} | {
    name: 'U256From1Byte';
    code: 0x6c;
} | {
    name: 'U256From2Byte';
    code: 0x6d;
} | {
    name: 'U256From4Byte';
    code: 0x6e;
} | {
    name: 'U256From8Byte';
    code: 0x6f;
} | {
    name: 'U256From16Byte';
    code: 0x70;
} | {
    name: 'U256From32Byte';
    code: 0x71;
} | {
    name: 'EthEcRecover';
    code: 0x72;
} | {
    name: 'Log6';
    code: 0x73;
} | {
    name: 'Log7';
    code: 0x74;
} | {
    name: 'Log8';
    code: 0x75;
} | {
    name: 'Log9';
    code: 0x76;
} | {
    name: 'ContractIdToAddress';
    code: 0x77;
} | {
    name: 'LoadLocalByIndex';
    code: 0x78;
} | {
    name: 'StoreLocalByIndex';
    code: 0x79;
} | {
    name: 'Dup';
    code: 0x7a;
} | {
    name: 'AssertWithErrorCode';
    code: 0x7b;
} | {
    name: 'Swap';
    code: 0x7c;
} | {
    name: 'BlockHash';
    code: 0x7d;
} | {
    name: 'DEBUG';
    code: 0x7e;
    stringParts: ByteString[];
} | {
    name: 'TxGasPrice';
    code: 0x7f;
} | {
    name: 'TxGasAmount';
    code: 0x80;
} | {
    name: 'TxGasFee';
    code: 0x81;
} | {
    name: 'I256Exp';
    code: 0x82;
} | {
    name: 'U256Exp';
    code: 0x83;
} | {
    name: 'U256ModExp';
    code: 0x84;
} | {
    name: 'VerifyBIP340Schnorr';
    code: 0x85;
} | {
    name: 'GetSegregatedSignature';
    code: 0x86;
} | {
    name: 'MulModN';
    code: 0x87;
} | {
    name: 'AddModN';
    code: 0x88;
} | {
    name: 'U256ToString';
    code: 0x89;
} | {
    name: 'I256ToString';
    code: 0x8a;
} | {
    name: 'BoolToString';
    code: 0x8b;
} | {
    name: 'GroupOfAddress';
    code: 0x8c;
} | {
    name: 'LoadMutField';
    code: 0xa0;
    index: number;
} | {
    name: 'StoreMutField';
    code: 0xa1;
    index: number;
} | {
    name: 'ApproveAlph';
    code: 0xa2;
} | {
    name: 'ApproveToken';
    code: 0xa3;
} | {
    name: 'AlphRemaining';
    code: 0xa4;
} | {
    name: 'TokenRemaining';
    code: 0xa5;
} | {
    name: 'IsPaying';
    code: 0xa6;
} | {
    name: 'TransferAlph';
    code: 0xa7;
} | {
    name: 'TransferAlphFromSelf';
    code: 0xa8;
} | {
    name: 'TransferAlphToSelf';
    code: 0xa9;
} | {
    name: 'TransferToken';
    code: 0xaa;
} | {
    name: 'TransferTokenFromSelf';
    code: 0xab;
} | {
    name: 'TransferTokenToSelf';
    code: 0xac;
} | {
    name: 'CreateContract';
    code: 0xad;
} | {
    name: 'CreateContractWithToken';
    code: 0xae;
} | {
    name: 'CopyCreateContract';
    code: 0xaf;
} | {
    name: 'DestroySelf';
    code: 0xb0;
} | {
    name: 'SelfContractId';
    code: 0xb1;
} | {
    name: 'SelfAddress';
    code: 0xb2;
} | {
    name: 'CallerContractId';
    code: 0xb3;
} | {
    name: 'CallerAddress';
    code: 0xb4;
} | {
    name: 'IsCalledFromTxScript';
    code: 0xb5;
} | {
    name: 'CallerInitialStateHash';
    code: 0xb6;
} | {
    name: 'CallerCodeHash';
    code: 0xb7;
} | {
    name: 'ContractInitialStateHash';
    code: 0xb8;
} | {
    name: 'ContractCodeHash';
    code: 0xb9;
} | {
    name: 'MigrateSimple';
    code: 0xba;
} | {
    name: 'MigrateWithFields';
    code: 0xbb;
} | {
    name: 'CopyCreateContractWithToken';
    code: 0xbc;
} | {
    name: 'BurnToken';
    code: 0xbd;
} | {
    name: 'LockApprovedAssets';
    code: 0xbe;
} | {
    name: 'CreateSubContract';
    code: 0xbf;
} | {
    name: 'CreateSubContractWithToken';
    code: 0xc0;
} | {
    name: 'CopyCreateSubContract';
    code: 0xc1;
} | {
    name: 'CopyCreateSubContractWithToken';
    code: 0xc2;
} | {
    name: 'LoadMutFieldByIndex';
    code: 0xc3;
} | {
    name: 'StoreMutFieldByIndex';
    code: 0xc4;
} | {
    name: 'ContractExists';
    code: 0xc5;
} | {
    name: 'CreateContractAndTransferToken';
    code: 0xc6;
} | {
    name: 'CopyCreateContractAndTransferToken';
    code: 0xc7;
} | {
    name: 'CreateSubContractAndTransferToken';
    code: 0xc8;
} | {
    name: 'CopyCreateSubContractAndTransferToken';
    code: 0xc9;
} | {
    name: 'NullContractAddress';
    code: 0xca;
} | {
    name: 'SubContractId';
    code: 0xcb;
} | {
    name: 'SubContractIdOf';
    code: 0xcc;
} | {
    name: 'ALPHTokenId';
    code: 0xcd;
} | {
    name: 'LoadImmField';
    code: 0xce;
    index: number;
} | {
    name: 'LoadImmFieldByIndex';
    code: 0xcf;
} | {
    name: 'PayGasFee';
    code: 0xd0;
} | {
    name: 'MinimalContractDeposit';
    code: 0xd1;
} | {
    name: 'CreateMapEntry';
    code: 0xd2;
    immFieldsNum: number;
    mutFieldsNum: number;
} | {
    name: 'MethodSelector';
    code: 0xd3;
    selector: number;
} | {
    name: 'CallExternalBySelector';
    code: 0xd4;
    selector: number;
};
export declare const CallLocalCode = 0;
export declare const CallExternalCode = 1;
export declare const I256ConstCode = 18;
export declare const U256ConstCode = 19;
export declare const BytesConstCode = 20;
export declare const AddressConstCode = 21;
export declare const LoadLocalCode = 22;
export declare const StoreLocalCode = 23;
export declare const JumpCode = 74;
export declare const IfTrueCode = 75;
export declare const IfFalseCode = 76;
export declare const DEBUGCode = 126;
export declare const LoadMutFieldCode = 160;
export declare const StoreMutFieldCode = 161;
export declare const LoadImmFieldCode = 206;
export declare const CreateMapEntryCode = 210;
export declare const MethodSelectorCode = 211;
export declare const CallExternalBySelectorCode = 212;
export declare const CallLocal: (index: number) => Instr;
export declare const CallExternal: (index: number) => Instr;
export declare const Return: Instr;
export declare const ConstTrue: Instr;
export declare const ConstFalse: Instr;
export declare const I256Const0: Instr;
export declare const I256Const1: Instr;
export declare const I256Const2: Instr;
export declare const I256Const3: Instr;
export declare const I256Const4: Instr;
export declare const I256Const5: Instr;
export declare const I256ConstN1: Instr;
export declare const U256Const0: Instr;
export declare const U256Const1: Instr;
export declare const U256Const2: Instr;
export declare const U256Const3: Instr;
export declare const U256Const4: Instr;
export declare const U256Const5: Instr;
export declare const I256Const: (value: bigint) => Instr;
export declare const U256Const: (value: bigint) => Instr;
export declare const BytesConst: (value: ByteString) => Instr;
export declare const AddressConst: (value: LockupScript) => Instr;
export declare const LoadLocal: (index: number) => Instr;
export declare const StoreLocal: (index: number) => Instr;
export declare const Pop: Instr;
export declare const BoolNot: Instr;
export declare const BoolAnd: Instr;
export declare const BoolOr: Instr;
export declare const BoolEq: Instr;
export declare const BoolNeq: Instr;
export declare const BoolToByteVec: Instr;
export declare const I256Add: Instr;
export declare const I256Sub: Instr;
export declare const I256Mul: Instr;
export declare const I256Div: Instr;
export declare const I256Mod: Instr;
export declare const I256Eq: Instr;
export declare const I256Neq: Instr;
export declare const I256Lt: Instr;
export declare const I256Le: Instr;
export declare const I256Gt: Instr;
export declare const I256Ge: Instr;
export declare const U256Add: Instr;
export declare const U256Sub: Instr;
export declare const U256Mul: Instr;
export declare const U256Div: Instr;
export declare const U256Mod: Instr;
export declare const U256Eq: Instr;
export declare const U256Neq: Instr;
export declare const U256Lt: Instr;
export declare const U256Le: Instr;
export declare const U256Gt: Instr;
export declare const U256Ge: Instr;
export declare const U256ModAdd: Instr;
export declare const U256ModSub: Instr;
export declare const U256ModMul: Instr;
export declare const U256BitAnd: Instr;
export declare const U256BitOr: Instr;
export declare const U256Xor: Instr;
export declare const U256SHL: Instr;
export declare const U256SHR: Instr;
export declare const I256ToU256: Instr;
export declare const I256ToByteVec: Instr;
export declare const U256ToI256: Instr;
export declare const U256ToByteVec: Instr;
export declare const ByteVecEq: Instr;
export declare const ByteVecNeq: Instr;
export declare const ByteVecSize: Instr;
export declare const ByteVecConcat: Instr;
export declare const AddressEq: Instr;
export declare const AddressNeq: Instr;
export declare const AddressToByteVec: Instr;
export declare const IsAssetAddress: Instr;
export declare const IsContractAddress: Instr;
export declare const Jump: (offset: number) => Instr;
export declare const IfTrue: (offset: number) => Instr;
export declare const IfFalse: (offset: number) => Instr;
export declare const Assert: Instr;
export declare const Blake2b: Instr;
export declare const Keccak256: Instr;
export declare const Sha256: Instr;
export declare const Sha3: Instr;
export declare const VerifyTxSignature: Instr;
export declare const VerifySecP256K1: Instr;
export declare const VerifyED25519: Instr;
export declare const NetworkId: Instr;
export declare const BlockTimeStamp: Instr;
export declare const BlockTarget: Instr;
export declare const TxId: Instr;
export declare const TxInputAddressAt: Instr;
export declare const TxInputsSize: Instr;
export declare const VerifyAbsoluteLocktime: Instr;
export declare const VerifyRelativeLocktime: Instr;
export declare const Log1: Instr;
export declare const Log2: Instr;
export declare const Log3: Instr;
export declare const Log4: Instr;
export declare const Log5: Instr;
export declare const ByteVecSlice: Instr;
export declare const ByteVecToAddress: Instr;
export declare const Encode: Instr;
export declare const Zeros: Instr;
export declare const U256To1Byte: Instr;
export declare const U256To2Byte: Instr;
export declare const U256To4Byte: Instr;
export declare const U256To8Byte: Instr;
export declare const U256To16Byte: Instr;
export declare const U256To32Byte: Instr;
export declare const U256From1Byte: Instr;
export declare const U256From2Byte: Instr;
export declare const U256From4Byte: Instr;
export declare const U256From8Byte: Instr;
export declare const U256From16Byte: Instr;
export declare const U256From32Byte: Instr;
export declare const EthEcRecover: Instr;
export declare const Log6: Instr;
export declare const Log7: Instr;
export declare const Log8: Instr;
export declare const Log9: Instr;
export declare const ContractIdToAddress: Instr;
export declare const LoadLocalByIndex: Instr;
export declare const StoreLocalByIndex: Instr;
export declare const Dup: Instr;
export declare const AssertWithErrorCode: Instr;
export declare const Swap: Instr;
export declare const BlockHash: Instr;
export declare const DEBUG: (stringParts: ByteString[]) => Instr;
export declare const TxGasPrice: Instr;
export declare const TxGasAmount: Instr;
export declare const TxGasFee: Instr;
export declare const I256Exp: Instr;
export declare const U256Exp: Instr;
export declare const U256ModExp: Instr;
export declare const VerifyBIP340Schnorr: Instr;
export declare const GetSegregatedSignature: Instr;
export declare const MulModN: Instr;
export declare const AddModN: Instr;
export declare const U256ToString: Instr;
export declare const I256ToString: Instr;
export declare const BoolToString: Instr;
export declare const GroupOfAddress: Instr;
export declare const LoadMutField: (index: number) => Instr;
export declare const StoreMutField: (index: number) => Instr;
export declare const ApproveAlph: Instr;
export declare const ApproveToken: Instr;
export declare const AlphRemaining: Instr;
export declare const TokenRemaining: Instr;
export declare const IsPaying: Instr;
export declare const TransferAlph: Instr;
export declare const TransferAlphFromSelf: Instr;
export declare const TransferAlphToSelf: Instr;
export declare const TransferToken: Instr;
export declare const TransferTokenFromSelf: Instr;
export declare const TransferTokenToSelf: Instr;
export declare const CreateContract: Instr;
export declare const CreateContractWithToken: Instr;
export declare const CopyCreateContract: Instr;
export declare const DestroySelf: Instr;
export declare const SelfContractId: Instr;
export declare const SelfAddress: Instr;
export declare const CallerContractId: Instr;
export declare const CallerAddress: Instr;
export declare const IsCalledFromTxScript: Instr;
export declare const CallerInitialStateHash: Instr;
export declare const CallerCodeHash: Instr;
export declare const ContractInitialStateHash: Instr;
export declare const ContractCodeHash: Instr;
export declare const MigrateSimple: Instr;
export declare const MigrateWithFields: Instr;
export declare const CopyCreateContractWithToken: Instr;
export declare const BurnToken: Instr;
export declare const LockApprovedAssets: Instr;
export declare const CreateSubContract: Instr;
export declare const CreateSubContractWithToken: Instr;
export declare const CopyCreateSubContract: Instr;
export declare const CopyCreateSubContractWithToken: Instr;
export declare const LoadMutFieldByIndex: Instr;
export declare const StoreMutFieldByIndex: Instr;
export declare const ContractExists: Instr;
export declare const CreateContractAndTransferToken: Instr;
export declare const CopyCreateContractAndTransferToken: Instr;
export declare const CreateSubContractAndTransferToken: Instr;
export declare const CopyCreateSubContractAndTransferToken: Instr;
export declare const NullContractAddress: Instr;
export declare const SubContractId: Instr;
export declare const SubContractIdOf: Instr;
export declare const ALPHTokenId: Instr;
export declare const LoadImmField: (index: number) => Instr;
export declare const LoadImmFieldByIndex: Instr;
export declare const PayGasFee: Instr;
export declare const MinimalContractDeposit: Instr;
export declare const CreateMapEntry: (immFieldsNum: number, mutFieldsNum: number) => Instr;
export declare const MethodSelector: (selector: number) => Instr;
export declare const CallExternalBySelector: (selector: number) => Instr;
export declare class InstrCodec extends Codec<Instr> {
    encode(instr: Instr): Uint8Array;
    _decode(input: Reader): Instr;
}
export declare const instrCodec: InstrCodec;
export declare const instrsCodec: ArrayCodec<Instr>;
export declare function toU256(number: bigint): Instr;
export declare function toI256(number: bigint): Instr;
