import { Subscription, SubscribeOptions } from '../utils/subscription';
import * as node from '../api/api-alephium';
import { NodeProvider } from '../api';
export type ReorgCallback = (fromGroup: number, toGroup: number, orphanBlocks: node.BlockEntry[], newBlocks: node.BlockEntry[]) => Promise<void> | void;
export interface BlockSubscribeOptions extends SubscribeOptions<node.BlockEntry[]> {
    reorgCallback?: ReorgCallback;
}
export declare abstract class BlockSubscriptionBase extends Subscription<node.BlockEntry[]> {
    abstract readonly reorgCallback?: ReorgCallback;
    abstract getHashesAtHeight(fromGroup: number, toGroup: number, height: number): Promise<string[]>;
    abstract getBlockByHash(hash: string): Promise<node.BlockEntry>;
    protected getParentHash(block: node.BlockEntry): string;
    protected handleReorg(fromGroup: number, toGroup: number, orphanBlockHash: string, newBlockHash: string): Promise<void>;
}
export declare class BlockSubscription extends BlockSubscriptionBase {
    readonly nodeProvider: NodeProvider;
    readonly reorgCallback?: ReorgCallback;
    private fromTimeStamp;
    private parents;
    private cache;
    constructor(options: BlockSubscribeOptions, fromTimeStamp: number, nodeProvider?: NodeProvider | undefined);
    getHashesAtHeight(fromGroup: number, toGroup: number, height: number): Promise<string[]>;
    getBlockByHash(hash: string): Promise<node.BlockEntry>;
    private getMissingBlocksAndHandleReorg;
    private handleBlocks;
    polling(): Promise<void>;
}
